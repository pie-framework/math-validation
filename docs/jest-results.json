{
  "numFailedTestSuites": 1,
  "numFailedTests": 0,
  "numPassedTestSuites": 2,
  "numPassedTests": 10,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 1,
  "numTodoTests": 0,
  "numTotalTestSuites": 3,
  "numTotalTests": 10,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1617628378608,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 8,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1617628382504,
        "runtime": 3507,
        "slow": false,
        "start": 1617628378997
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "/Users/carla/Documents/Work/pie-framework/math-validation/src/conversion/__tests__/latex-to-ast.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta 1,000 => 1000",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "1,000 => 1000"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta 1,000,000 => 1000000",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "1,000,000 => 1000000"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a×b => [ '*', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a×b => [ '*', 'a', 'b' ]"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a•b => [ '*', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a•b => [ '*', 'a', 'b' ]"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a·b => [ '*', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a·b => [ '*', 'a', 'b' ]"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a÷b => [ '/', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a÷b => [ '/', 'a', 'b' ]"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a≤b => [ 'le', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a≤b => [ 'le', 'a', 'b' ]"
        },
        {
          "ancestorTitles": [
            "bugs in lta"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "bugs in lta a≥b => [ 'ge', 'a', 'b' ]",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "a≥b => [ 'ge', 'a', 'b' ]"
        }
      ],
      "failureMessage": null
    },
    {
      "failureMessage": "  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    This usually means that you are trying to import a file which Jest cannot parse, e.g. it's not plain JavaScript.\n\n    By default, if Jest sees a Babel config, it will use that to transform your files, ignoring \"node_modules\".\n\n    Here's what you can do:\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/en/configuration.html\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    /Users/carla/Documents/Work/pie-framework/math-validation/src/legacy/index.js:30\n            catch () {\n                   ^\n\n    SyntaxError: Unexpected token ')'\n\n    \u001b[0m \u001b[90m  9 | \u001b[39m}\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 10 | \u001b[39mexports\u001b[33m.\u001b[39m__esModule \u001b[33m=\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 11 | \u001b[39m\u001b[36mvar\u001b[39m legacy_1 \u001b[33m=\u001b[39m require(\u001b[32m\"./legacy\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m    | \u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 12 | \u001b[39m\u001b[36mvar\u001b[39m latex_equal_1 \u001b[33m=\u001b[39m require(\u001b[32m\"./latex-equal\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 13 | \u001b[39m\u001b[90m/**\u001b[39m\u001b[0m\n    \u001b[0m \u001b[90m 14 | \u001b[39m\u001b[90m * For dev purposes allow legacy to be called for comparison.\u001b[39m\u001b[0m\n\n      \u001b[2mat Runtime._execModule (\u001b[22mnode_modules/jest-runtime/build/index.js\u001b[2m:1179:56)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/index.js\u001b[2m:11:16)\u001b[22m\n",
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 0,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 0,
        "runtime": 0,
        "slow": false,
        "start": 0
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testExecError": "Unexpected token ')'",
      "testFilePath": "/Users/carla/Documents/Work/pie-framework/math-validation/src/__tests__/latex-equal.spec.ts",
      "testResults": []
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1617628383355,
        "runtime": 4341,
        "slow": false,
        "start": 1617628379014
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "/Users/carla/Documents/Work/pie-framework/math-validation/src/__tests__/node-sort.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "'(b + a)' => '(a + b)'"
          ],
          "duration": 37,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "'(b + a)' => '(a + b)' sorts",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "sorts"
        },
        {
          "ancestorTitles": [
            "'b < a' => 'b < a'"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "'b < a' => 'b < a' sorts",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "sorts"
        }
      ],
      "failureMessage": null
    }
  ],
  "wasInterrupted": false
}